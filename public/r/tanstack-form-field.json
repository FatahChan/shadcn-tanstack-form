{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tanstack-form-field",
  "type": "registry:ui",
  "title": "TanStack Form Fields",
  "description": "A form component built with TanStack Form & Shadcn/UI Fields.",
  "files": [
    {
      "path": "src/components/ui/tanstack-form-field.tsx",
      "content": "\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  createFormHook,\n  createFormHookContexts,\n  useStore,\n} from \"@tanstack/react-form\";\nimport * as React from \"react\";\nimport {\n  Field,\n  FieldDescription,\n  FieldError,\n  FieldLabel,\n} from \"@/components/ui/field\";\n\nconst {\n  fieldContext,\n  formContext,\n  useFieldContext: useFormFieldContext,\n  useFormContext,\n} = createFormHookContexts();\n\ntype FormFieldContextValue = {\n  id: string;\n};\n\nconst FieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue,\n);\n\nconst useFieldContext = () => {\n  const { id } = React.useContext(FieldContext);\n  const { name, ...fieldContext } = useFormFieldContext();\n  if (!fieldContext) {\n    throw new Error(\"useFieldContext should be used within <form.Field>\");\n  }\n\n  return {\n    id,\n    name,\n    formFieldId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldContext,\n  };\n};\n\nfunction FieldWrapper(props: React.ComponentProps<typeof Field>) {\n  const id = React.useId();\n  return (\n    <FieldContext.Provider value={{ id }}>\n      <Field {...props} />\n    </FieldContext.Provider>\n  );\n}\n\nfunction FieldControl({\n  valuePropName,\n  ...props\n}: React.ComponentProps<typeof Slot> & {\n  valuePropName?: string;\n}) {\n  const { formFieldId, formDescriptionId, formMessageId, store } =\n    useFieldContext();\n\n  const isInvalid = useStore(\n    store,\n    (state) => state.meta.isTouched && !state.meta.isValid,\n  );\n  return (\n    <Slot\n      data-slot=\"field-control\"\n      id={formFieldId}\n      aria-invalid={isInvalid}\n      aria-describedby={`${formDescriptionId} ${isInvalid ? formMessageId : \"\"}`}\n      {...props}\n    />\n  );\n}\n\nfunction FieldLabelWrapper({\n  className,\n  ...props\n}: React.ComponentProps<typeof FieldLabel>) {\n  const { formFieldId } = useFieldContext();\n  return <FieldLabel htmlFor={formFieldId} {...props} />;\n}\n\nfunction FieldDescriptionWrapper(\n  props: React.ComponentProps<typeof FieldDescription>,\n) {\n  const { formDescriptionId } = useFieldContext();\n  return <FieldDescription id={formDescriptionId} {...props} />;\n}\n\nfunction FieldErrorWrapper({\n  errors: errorsProps,\n  ...props\n}: React.ComponentProps<typeof FieldError>) {\n  const { store, formMessageId } = useFieldContext();\n  const _errors = useStore(store, (state) => state.meta.errors);\n  const isInvalid = useStore(\n    store,\n    (state) => state.meta.isTouched && !state.meta.isValid,\n  );\n  if (!isInvalid) return null;\n\n  const errors = errorsProps ?? _errors;\n  return <FieldError id={formMessageId} errors={errors} {...props} />;\n}\n\nconst { useAppForm, withForm } = createFormHook({\n  fieldContext,\n  formContext,\n  fieldComponents: {\n    Field: FieldWrapper,\n    FieldLabel: FieldLabelWrapper,\n    FieldDescription: FieldDescriptionWrapper,\n    FieldError: FieldErrorWrapper,\n    FieldControl,\n  },\n  formComponents: {},\n});\n\nexport { useAppForm, useFieldContext, useFormContext, withForm };\n",
      "type": "registry:ui"
    }
  ]
}