{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tanstack-form",
  "type": "registry:ui",
  "title": "TanStack Form",
  "description": "A form component built with TanStack Form.",
  "files": [
    {
      "path": "src/components/ui/tanstack-form.tsx",
      "content": "// deprecated: use src/components/ui/tanstack-form-field.tsx instead\n\"use client\";\n\nimport { Slot } from \"@radix-ui/react-slot\";\nimport {\n  createFormHook,\n  createFormHookContexts,\n  useStore,\n} from \"@tanstack/react-form\";\nimport * as React from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport { cn } from \"@/lib/utils\";\n\nconst {\n  fieldContext,\n  formContext,\n  useFieldContext: useFormFieldContext,\n  useFormContext,\n} = createFormHookContexts();\n\nconst { useAppForm, withForm } = createFormHook({\n  fieldContext,\n  formContext,\n  fieldComponents: {\n    FormLabel,\n    FormControl,\n    FormDescription,\n    FormMessage,\n    FormItem,\n  },\n  formComponents: {},\n});\n\ntype FormItemContextValue = {\n  id: string;\n};\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue,\n);\n\nfunction FormItem({ className, ...props }: React.ComponentProps<\"div\">) {\n  const id = React.useId();\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div\n        data-slot=\"form-item\"\n        className={cn(\"grid gap-2\", className)}\n        {...props}\n      />\n    </FormItemContext.Provider>\n  );\n}\n\nconst useFieldContext = () => {\n  const { id } = React.useContext(FormItemContext);\n  const { name, store, ...fieldContext } = useFormFieldContext();\n\n  const errors = useStore(store, (state) => state.meta.errors);\n  if (!fieldContext) {\n    throw new Error(\"useFieldContext should be used within <FormItem>\");\n  }\n\n  return {\n    id,\n    name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    errors,\n    store,\n    ...fieldContext,\n  };\n};\n\nfunction FormLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof Label>) {\n  const { formItemId, errors } = useFieldContext();\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!errors.length}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  );\n}\n\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\n  const { errors, formItemId, formDescriptionId, formMessageId } =\n    useFieldContext();\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !errors.length\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!errors.length}\n      {...props}\n    />\n  );\n}\n\nfunction FormDescription({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { formDescriptionId } = useFieldContext();\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction FormMessage({ className, ...props }: React.ComponentProps<\"p\">) {\n  const { errors, formMessageId } = useFieldContext();\n  const body = errors.length\n    ? String(errors.at(0)?.message ?? \"\")\n    : props.children;\n  if (!body) return null;\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  );\n}\n\nexport { useAppForm, useFormContext, useFieldContext, withForm };\n",
      "type": "registry:ui"
    }
  ]
}