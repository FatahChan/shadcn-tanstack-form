{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login",
  "type": "registry:block",
  "title": "Login",
  "description": "A login form component built with TanStack Form.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "src/components/blocks/login.tsx",
      "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport { type FormHTMLAttributes, useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\nimport PasswordInput from \"@/components/form-fields/password-input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form-field\";\nimport { cn } from \"@/lib/utils\";\n\nconst loginFormSchema = z.object({\n  email: z.string(),\n  password: z.string().min(1),\n});\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface LoginFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof loginFormSchema>) => void;\n  defaultValues?: z.infer<typeof loginFormSchema>;\n}\n\nfunction LoginForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: LoginFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n    },\n    validators: { onDynamic: loginFormSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Login successful!\");\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        onSubmit={handleSubmit}\n        className={cn(\n          \"mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\",\n          className,\n        )}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Email</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  placeholder=\"example@example.com\"\n                  type=\"email\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldDescription>\n                This is your email\n              </field.FieldDescription>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Password</field.FieldLabel>\n              <field.FieldControl>\n                <PasswordInput\n                  placeholder=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldDescription>\n                This is your password\n              </field.FieldDescription>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\">\n          Submit\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nLoginForm.displayName = \"LoginForm\";\n\nexport default LoginForm;\n",
      "type": "registry:block"
    }
  ],
  "categories": [
    "forms",
    "auth"
  ]
}