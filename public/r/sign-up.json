{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sign-up",
  "type": "registry:block",
  "title": "Sign Up",
  "description": "A sign up form component built with TanStack Form.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
    "button",
    "input"
  ],
  "files": [
    {
      "path": "src/components/blocks/sign-up.tsx",
      "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form-field\";\n\nconst signUpSchema = z\n  .object({\n    email: z.string().email({\n      message: \"Please enter a valid email address.\",\n    }),\n    password: z.string().min(8, {\n      message: \"Password must be at least 8 characters long.\",\n    }),\n    confirmPassword: z.string(),\n    fullName: z.string().min(2, {\n      message: \"Full name must be at least 2 characters long.\",\n    }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface SignUpFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof signUpSchema>) => void;\n  defaultValues?: z.infer<typeof signUpSchema>;\n}\nfunction SignUpForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: SignUpFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n      confirmPassword: defaultValues?.confirmPassword ?? \"\",\n      fullName: defaultValues?.fullName ?? \"\",\n    },\n    validators: { onDynamic: signUpSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Sign up successful!\");\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Full Name</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Email</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  type=\"email\"\n                  placeholder=\"john.doe@example.com\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Password</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"confirmPassword\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Confirm Password</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <Button type=\"submit\" className=\"w-full\">\n          Sign Up\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nSignUpForm.displayName = \"SignUpForm\";\n\nexport default SignUpForm;\n",
      "type": "registry:block"
    }
  ],
  "categories": [
    "forms",
    "auth"
  ]
}