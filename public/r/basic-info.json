{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "basic-info",
  "type": "registry:block",
  "title": "Basic Info",
  "description": "A basic info form component built with TanStack Form.",
  "dependencies": [
    "zod"
  ],
  "registryDependencies": [
    "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
    "button",
    "input",
    "textarea"
  ],
  "files": [
    {
      "path": "src/registry/new-york/blocks/basic-info.tsx",
      "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useCallback } from \"react\";\nimport { z } from \"zod\";\n\nconst FormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n  email: z.string().email({\n    message: \"Please enter a valid email address.\",\n  }),\n  age: z.number().min(8, {\n    message: \"Age must be at least 18 years.\",\n  }),\n  bio: z.string().max(160, {\n    message: \"Bio must not exceed 160 characters, ss again.\",\n  }),\n});\n\nfunction BasicInfoForm({\n  onSubmit,\n}: { onSubmit: (data: z.infer<typeof FormSchema>) => void }) {\n  const form = useAppForm({\n    validators: { onBlur: FormSchema },\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      age: 0,\n      bio: \"\",\n    },\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        className=\"@container mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"grid @md:grid-cols-2 grid-cols-1 items-start gap-4\">\n          <form.AppField\n            name=\"username\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Username</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"FatahChan\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  This is your public display name.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"email\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Email</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  Enter your email address for account verification.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"age\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Age</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"number\"\n                    inputMode=\"numeric\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(Number(e.target.value))}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  Must be at least 18 years old.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"bio\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Bio</field.FormLabel>\n                <field.FormControl>\n                  <Textarea\n                    placeholder=\"Tell us about yourself\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  A brief description about yourself (optional).\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n        </div>\n        <Button type=\"submit\" className=\"w-full\">\n          Create Account\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nBasicInfoForm.displayName = \"BasicInfoForm\";\n\nexport default BasicInfoForm;\n",
      "type": "registry:block"
    }
  ],
  "categories": [
    "forms",
    "user"
  ]
}