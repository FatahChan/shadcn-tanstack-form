{
  "name": "shadcn-tanstack-form",
  "homepage": "https://fatahchan.github.io/shadcn-tanstack-form/",
  "items": [
    {
      "name": "tanstack-form",
      "type": "registry:ui",
      "title": "TanStack Form",
      "description": "A form component built with TanStack Form.",
      "files": [
        {
          "name": "tanstack-form",
          "type": "registry:ui",
          "title": "TanStack Form",
          "path": "src/components/ui/tanstack-form.tsx",
          "description": "A form component built with TanStack Form.",
          "dependencies": [
            "@tanstack/react-form"
          ],
          "registryDependencies": [
            "label"
          ]
        }
      ]
    },
    {
      "name": "tanstack-form-field",
      "type": "registry:ui",
      "title": "TanStack Form Fields",
      "description": "A form component built with TanStack Form & Shadcn/UI Fields.",
      "files": [
        {
          "name": "tanstack-form-field",
          "type": "registry:ui",
          "title": "TanStack Form Fields",
          "path": "src/components/ui/tanstack-form-field.tsx",
          "description": "A form component built with TanStack Form and Shadcn/UI Fields.",
          "dependencies": [
            "@tanstack/react-form"
          ],
          "registryDependencies": [
            "field"
          ]
        }
      ]
    },
    {
      "name": "basic-info",
      "type": "registry:block",
      "description": "A basic info form component built with TanStack Form.",
      "title": "Basic Info",
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
        "button",
        "input",
        "textarea"
      ],
      "files": [
        {
          "path": "src/components/blocks/basic-info.tsx",
          "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport { type FormHTMLAttributes, useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form-field\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nconst FormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n  email: z.string().email({\n    message: \"Please enter a valid email address.\",\n  }),\n  age: z.number().min(18, {\n    message: \"Age must be at least 18 years.\",\n  }),\n  bio: z.string().max(160, {\n    message: \"Bio must not exceed 160 characters, ss again.\",\n  }),\n});\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface BasicInfoFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof FormSchema>) => void;\n  defaultValues?: z.infer<typeof FormSchema>;\n}\n\nfunction BasicInfoForm({\n  onSubmit,\n  defaultValues,\n  ...props\n}: BasicInfoFormProps) {\n  const form = useAppForm({\n    validators: { onDynamic: FormSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Account created successfully!\");\n      formApi.reset();\n    },\n    defaultValues: defaultValues ?? {\n      username: \"\",\n      email: \"\",\n      age: 0,\n      bio: \"\",\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        className=\"@container mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <div className=\"grid @md:grid-cols-2 grid-cols-1 items-start gap-4\">\n          <form.AppField\n            name=\"username\"\n            children={(field) => (\n              <field.Field className=\"space-y-1.5\">\n                <field.FieldLabel>Username</field.FieldLabel>\n                <field.FieldControl>\n                  <Input\n                    placeholder=\"FatahChan\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FieldControl>\n                <field.FieldDescription className=\"text-xs\">\n                  This is your public display name.\n                </field.FieldDescription>\n                <field.FieldError className=\"text-xs\" />\n              </field.Field>\n            )}\n          />\n          <form.AppField\n            name=\"email\"\n            children={(field) => (\n              <field.Field className=\"space-y-1.5\">\n                <field.FieldLabel>Email</field.FieldLabel>\n                <field.FieldControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FieldControl>\n                <field.FieldDescription className=\"text-xs\">\n                  Enter your email address for account verification.\n                </field.FieldDescription>\n                <field.FieldError className=\"text-xs\" />\n              </field.Field>\n            )}\n          />\n          <form.AppField\n            name=\"age\"\n            children={(field) => (\n              <field.Field className=\"space-y-1.5\">\n                <field.FieldLabel>Age</field.FieldLabel>\n                <field.FieldControl>\n                  <Input\n                    type=\"number\"\n                    inputMode=\"numeric\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(Number(e.target.value))}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FieldControl>\n                <field.FieldDescription className=\"text-xs\">\n                  Must be at least 18 years old.\n                </field.FieldDescription>\n                <field.FieldError className=\"text-xs\" />\n              </field.Field>\n            )}\n          />\n          <form.AppField\n            name=\"bio\"\n            children={(field) => (\n              <field.Field className=\"space-y-1.5\">\n                <field.FieldLabel>Bio</field.FieldLabel>\n                <field.FieldControl>\n                  <Textarea\n                    placeholder=\"Tell us about yourself\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FieldControl>\n                <field.FieldDescription className=\"text-xs\">\n                  A brief description about yourself (optional).\n                </field.FieldDescription>\n                <field.FieldError className=\"text-xs\" />\n              </field.Field>\n            )}\n          />\n        </div>\n        <Button type=\"submit\" className=\"w-full\">\n          Create Account\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nBasicInfoForm.displayName = \"BasicInfoForm\";\n\nexport default BasicInfoForm;\n",
          "type": "registry:block"
        }
      ],
      "categories": [
        "forms",
        "user"
      ]
    },
    {
      "name": "login",
      "type": "registry:block",
      "description": "A login form component built with TanStack Form.",
      "title": "Login",
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
        "button",
        "input"
      ],
      "files": [
        {
          "path": "src/components/blocks/login.tsx",
          "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport { type FormHTMLAttributes, useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport * as z from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport PasswordInput from \"@/components/ui/password-input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form-field\";\nimport { cn } from \"@/lib/utils\";\n\nconst loginFormSchema = z.object({\n  email: z.string(),\n  password: z.string().min(1),\n});\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface LoginFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof loginFormSchema>) => void;\n  defaultValues?: z.infer<typeof loginFormSchema>;\n}\n\nfunction LoginForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: LoginFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n    },\n    validators: { onDynamic: loginFormSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Login successful!\");\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        onSubmit={handleSubmit}\n        className={cn(\n          \"mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\",\n          className,\n        )}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Email</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  placeholder=\"example@example.com\"\n                  type=\"email\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldDescription>\n                This is your email\n              </field.FieldDescription>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Password</field.FieldLabel>\n              <field.FieldControl>\n                <PasswordInput\n                  placeholder=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldDescription>\n                This is your password\n              </field.FieldDescription>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\">\n          Submit\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nLoginForm.displayName = \"LoginForm\";\n\nexport default LoginForm;\n",
          "type": "registry:block"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ]
    },
    {
      "name": "shipping-info",
      "type": "registry:block",
      "description": "A shipping information form component built with TanStack Form.",
      "title": "Shipping Info",
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
        "https://shadcn-tanstack-form.netlify.app/r/phone-input.json",
        "button",
        "input"
      ],
      "files": [
        {
          "path": "src/components/blocks/shipping-info.tsx",
          "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport PhoneInputField from \"@/components/ui/phone-input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\n\nconst shippingSchema = z.object({\n  fullName: z.string().min(2, {\n    message: \"Full name must be at least 2 characters long.\",\n  }),\n  addressLine1: z.string().min(5, {\n    message: \"Address must be at least 5 characters long.\",\n  }),\n  addressLine2: z.string(),\n  city: z.string().min(2, {\n    message: \"City must be at least 2 characters long.\",\n  }),\n  state: z.string().min(2, {\n    message: \"State must be at least 2 characters long.\",\n  }),\n  postalCode: z.string().min(4, {\n    message: \"Please enter a valid postal code.\",\n  }),\n  phone: z.string().refine((value) => isValidPhoneNumber(value, \"US\"), {\n    message: \"Please enter a valid phone number.\",\n  }),\n});\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface ShippingFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof shippingSchema>) => void;\n  defaultValues?: z.infer<typeof shippingSchema>;\n}\n\nfunction ShippingForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: ShippingFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      fullName: defaultValues?.fullName ?? \"\",\n      addressLine1: defaultValues?.addressLine1 ?? \"\",\n      addressLine2: defaultValues?.addressLine2 ?? \"\",\n      city: defaultValues?.city ?? \"\",\n      state: defaultValues?.state ?? \"\",\n      postalCode: defaultValues?.postalCode ?? \"\",\n      phone: defaultValues?.phone ?? \"\",\n    },\n    validators: { onDynamic: shippingSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Shipping information submitted successfully!\");\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Full Name</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"addressLine1\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Address Line 1</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"123 Main St\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"addressLine2\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Address Line 2 (Optional)</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"Apt 4B\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <form.AppField\n            name=\"city\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>City</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"New York\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n\n          <form.AppField\n            name=\"state\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>State</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"NY\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <form.AppField\n            name=\"postalCode\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>Postal Code</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"10001\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n\n          <form.AppField\n            name=\"phone\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>Phone Number</field.FormLabel>\n                <field.FormControl>\n                  <PhoneInputField\n                    value={field.state.value}\n                    onChange={field.handleChange}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\">\n          Save Shipping Information\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nShippingForm.displayName = \"ShippingForm\";\n\nexport default ShippingForm;\n",
          "type": "registry:block"
        }
      ],
      "categories": [
        "forms",
        "checkout"
      ]
    },
    {
      "name": "sign-up",
      "type": "registry:block",
      "description": "A sign up form component built with TanStack Form.",
      "title": "Sign Up",
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
        "button",
        "input"
      ],
      "files": [
        {
          "path": "src/components/blocks/sign-up.tsx",
          "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form-field\";\n\nconst signUpSchema = z\n  .object({\n    email: z.string().email({\n      message: \"Please enter a valid email address.\",\n    }),\n    password: z.string().min(8, {\n      message: \"Password must be at least 8 characters long.\",\n    }),\n    confirmPassword: z.string(),\n    fullName: z.string().min(2, {\n      message: \"Full name must be at least 2 characters long.\",\n    }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface SignUpFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof signUpSchema>) => void;\n  defaultValues?: z.infer<typeof signUpSchema>;\n}\nfunction SignUpForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: SignUpFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n      confirmPassword: defaultValues?.confirmPassword ?? \"\",\n      fullName: defaultValues?.fullName ?? \"\",\n    },\n    validators: { onDynamic: signUpSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Sign up successful!\");\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Full Name</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Email</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  type=\"email\"\n                  placeholder=\"john.doe@example.com\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Password</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"confirmPassword\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Confirm Password</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <Button type=\"submit\" className=\"w-full\">\n          Sign Up\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nSignUpForm.displayName = \"SignUpForm\";\n\nexport default SignUpForm;\n",
          "type": "registry:block"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ]
    },
    {
      "name": "password-input",
      "type": "registry:component",
      "description": "A password input component",
      "title": "Password Input",
      "registryDependencies": [
        "input"
      ],
      "files": [
        {
          "path": "src/components/form-fields/password-input.tsx",
          "content": "\"use client\";\n\nimport { Eye, EyeOff } from \"lucide-react\";\nimport type { ComponentProps } from \"react\";\nimport { useCallback, useState } from \"react\";\nimport {\n  InputGroup,\n  InputGroupAddon,\n  InputGroupButton,\n  InputGroupInput,\n} from \"../ui/input-group\";\n\nexport default function PasswordInput({\n  className,\n  inputGroup,\n  ...props\n}: ComponentProps<typeof InputGroupInput> & {\n  inputGroup?: ComponentProps<typeof InputGroup>;\n}) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const toggleVisibility = useCallback(\n    () => setIsVisible((prevState) => !prevState),\n    [],\n  );\n\n  return (\n    <InputGroup {...inputGroup}>\n      <InputGroupInput placeholder=\"Password\" {...props} />\n      <InputGroupAddon align=\"inline-end\">\n        <InputGroupButton\n          aria-label=\"Toggle password visibility\"\n          title=\"Toggle password visibility\"\n          size=\"icon-xs\"\n          onClick={toggleVisibility}\n        >\n          {isVisible ? <EyeOff /> : <Eye />}\n        </InputGroupButton>\n      </InputGroupAddon>\n    </InputGroup>\n  );\n}\n",
          "type": "registry:component"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ]
    },
    {
      "name": "phone-input",
      "type": "registry:component",
      "description": "A phone input component",
      "title": "Phone Input",
      "dependencies": [
        "react-number-format",
        "libphonenumber-js"
      ],
      "registryDependencies": [
        "input"
      ],
      "files": [
        {
          "path": "src/components/form-fields/phone-input.tsx",
          "content": "import { AsYouType, type CountryCode } from \"libphonenumber-js\";\nimport type { ComponentProps } from \"react\";\nimport { NumberFormatBase } from \"react-number-format\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface PhoneInputFieldProps\n  extends Omit<\n    ComponentProps<typeof Input>,\n    \"type\" | \"defaultValue\" | \"onChange\"\n  > {\n  value?: string;\n  defaultValue?: string | number | null | undefined;\n  onChange?: (value: string) => void;\n}\n\nfunction phoneFormatter(countryCode: CountryCode, value: string) {\n  const asYouType = new AsYouType(countryCode);\n  return asYouType.input(value);\n}\n\nexport default function PhoneInputField({\n  value,\n  onChange,\n  defaultValue,\n  ...props\n}: PhoneInputFieldProps) {\n  return (\n    <NumberFormatBase\n      type=\"tel\"\n      value={value}\n      customInput={Input}\n      placeholder=\"Phone number\"\n      getInputRef={props.ref}\n      className={props.className}\n      defaultValue={defaultValue}\n      format={(value) => phoneFormatter(\"US\", value.slice(0, 15))}\n      onValueChange={(e) => {\n        onChange?.(e.value);\n      }}\n      {...props}\n    />\n  );\n}\n",
          "type": "registry:component"
        }
      ],
      "categories": [
        "forms",
        "user"
      ]
    },
    {
      "name": "rich-text",
      "type": "registry:component",
      "description": "A rich text component",
      "title": "Rich Text",
      "dependencies": [
        "@udecode/plate",
        "@udecode/plate-basic-elements",
        "@udecode/plate-basic-marks",
        "@udecode/plate-list"
      ],
      "registryDependencies": [
        "https://platejs.org/r/plate-ui/",
        "https://platejs.org/r/mark-toolbar-button/",
        "https://platejs.org/r/fixed-toolbar/",
        "https://platejs.org/r/heading-element/",
        "https://platejs.org/r/paragraph-element/",
        "https://platejs.org/r/blockquote-element/",
        "https://platejs.org/r/list-element/",
        "https://platejs.org/r/list-toolbar-button/"
      ],
      "files": [
        {
          "path": "src/components/form-fields/rich-text.tsx",
          "content": "import {\n  Plate,\n  PlateElement,\n  type PlateElementProps,\n  PlateLeaf,\n  type PlateLeafProps,\n  usePlateEditor,\n} from \"@udecode/plate/react\";\nimport { BasicElementsPlugin } from \"@udecode/plate-basic-elements/react\";\nimport { BasicMarksPlugin } from \"@udecode/plate-basic-marks/react\";\nimport { ListPlugin } from \"@udecode/plate-list/react\";\nimport { useState } from \"react\";\nimport { BlockquoteElement } from \"@/components/ui/blockquote-element\";\nimport { Editor, EditorContainer } from \"@/components/ui/editor\";\nimport { FixedToolbar } from \"@/components/ui/fixed-toolbar\";\nimport { HeadingElement } from \"@/components/ui/heading-element\";\nimport { ListElement } from \"@/components/ui/list-element\";\nimport { ListToolbarButton } from \"@/components/ui/list-toolbar-button\";\nimport { MarkToolbarButton } from \"@/components/ui/mark-toolbar-button\";\nimport { ParagraphElement } from \"@/components/ui/paragraph-element\";\nimport { ToolbarButton } from \"@/components/ui/toolbar\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function RichTextEditor({\n  value,\n  onChange,\n  onBlur,\n  placeholder,\n  className,\n}: {\n  value?: string;\n  onChange?: (value: string) => void;\n  onBlur?: () => void;\n  placeholder?: string;\n  className?: string;\n}) {\n  const [_value, _setValue] = useState<string>();\n  const editor = usePlateEditor({\n    plugins: [BasicElementsPlugin, BasicMarksPlugin, ListPlugin],\n    components: {\n      blockquote: BlockquoteElement,\n      p: ParagraphElement,\n      h1: (props: PlateElementProps) => (\n        <HeadingElement {...props} variant=\"h1\" />\n      ),\n      h2: (props: PlateElementProps) => (\n        <HeadingElement {...props} variant=\"h2\" />\n      ),\n      h3: (props: PlateElementProps) => (\n        <HeadingElement {...props} variant=\"h3\" />\n      ),\n      bold: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"strong\" />,\n      italic: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"em\" />,\n      underline: (props: PlateLeafProps) => <PlateLeaf {...props} as=\"u\" />,\n      ul: (props: PlateElementProps) => <ListElement {...props} variant=\"ul\" />,\n      ol: (props: PlateElementProps) => <ListElement {...props} variant=\"ol\" />,\n      li: (props: PlateElementProps) => <PlateElement {...props} as=\"li\" />,\n      value: value\n        ? JSON.parse(value)\n        : _value\n          ? JSON.parse(_value)\n          : undefined,\n    },\n  });\n\n  return (\n    <Plate\n      editor={editor}\n      onChange={({ value }) => {\n        if (onChange) {\n          onChange(JSON.stringify(value));\n        } else {\n          _setValue(JSON.stringify(value));\n        }\n      }}\n    >\n      <div className=\"grid w-full\">\n        <FixedToolbar className=\"flex flex-wrap justify-start gap-1 border\">\n          <ToolbarButton onClick={() => editor.tf.toggleBlock(\"h1\")}>\n            H1\n          </ToolbarButton>\n          <ToolbarButton onClick={() => editor.tf.toggleBlock(\"h2\")}>\n            H2\n          </ToolbarButton>\n          <ToolbarButton onClick={() => editor.tf.toggleBlock(\"h3\")}>\n            H3\n          </ToolbarButton>\n          <ToolbarButton onClick={() => editor.tf.toggleBlock(\"blockquote\")}>\n            Quote\n          </ToolbarButton>\n          <MarkToolbarButton nodeType=\"bold\" tooltip=\"Bold (⌘+B)\">\n            B\n          </MarkToolbarButton>\n          <MarkToolbarButton nodeType=\"italic\" tooltip=\"Italic (⌘+I)\">\n            I\n          </MarkToolbarButton>\n          <MarkToolbarButton nodeType=\"underline\" tooltip=\"Underline (⌘+U)\">\n            U\n          </MarkToolbarButton>\n          <ListToolbarButton nodeType=\"ul\" />\n          <ListToolbarButton nodeType=\"ol\" />\n        </FixedToolbar>\n        <EditorContainer>\n          <Editor\n            placeholder={placeholder}\n            variant=\"none\"\n            className={cn(\"min-h-[200px] rounded-t-none border p-2\", className)}\n            onBlur={() => onBlur?.()}\n          />\n        </EditorContainer>\n      </div>\n    </Plate>\n  );\n}\n",
          "type": "registry:component"
        }
      ],
      "categories": [
        "forms",
        "rich-text"
      ]
    },
    {
      "name": "blog-editor",
      "type": "registry:block",
      "description": "A blog editor component built with TanStack Form.",
      "title": "Blog Editor",
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form-field.json",
        "https://shadcn-tanstack-form.netlify.app/r/rich-text.json"
      ],
      "files": [
        {
          "path": "src/components/blocks/blog-editor.tsx",
          "content": "\"use client\";\nimport { revalidateLogic } from \"@tanstack/react-form\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { useCallback } from \"react\";\nimport { toast } from \"sonner\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport RichTextEditor from \"@/components/ui/rich-text\";\nimport { useAppForm } from \"@/components/ui/tanstack-form-field\";\n\nconst blogSchema = z.object({\n  title: z.string().min(1, {\n    message: \"Please enter a valid title.\",\n  }),\n  content: z.string(),\n});\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface BlogEditorProps extends FormProps {\n  onSubmit: (data: z.infer<typeof blogSchema>) => void;\n  defaultValues?: z.infer<typeof blogSchema>;\n}\nfunction BlogEditor({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: BlogEditorProps) {\n  const form = useAppForm({\n    defaultValues: {\n      title: defaultValues?.title ?? \"\",\n      content: defaultValues?.content ?? \"\",\n    },\n    validators: { onDynamic: blogSchema },\n    validationLogic: revalidateLogic({\n      mode: \"submit\",\n      modeAfterSubmission: \"change\",\n    }),\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      toast.success(\"Blog post created successfully!\");\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"title\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Title</field.FieldLabel>\n              <field.FieldControl>\n                <Input\n                  placeholder=\"Enter blog title...\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <form.AppField\n          name=\"content\"\n          children={(field) => (\n            <field.Field>\n              <field.FieldLabel>Content</field.FieldLabel>\n              <field.FieldControl>\n                <RichTextEditor\n                  value={field.state.value}\n                  onChange={(value) => field.handleChange(value)}\n                />\n              </field.FieldControl>\n              <field.FieldError />\n            </field.Field>\n          )}\n        />\n\n        <Button type=\"submit\" className=\"w-full\">\n          Submit\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nBlogEditor.displayName = \"BlogEditor\";\n\nexport default BlogEditor;\n",
          "type": "registry:block"
        }
      ],
      "categories": [
        "forms",
        "blog"
      ]
    }
  ]
}