{
  "name": "shadcn-tanstack-form",
  "homepage": "https://fatahchan.github.io/shadcn-tanstack-form/",
  "items": [
    {
      "name": "tanstack-form",
      "type": "registry:ui",
      "title": "TanStack Form",
      "description": "A form component built with TanStack Form.",
      "files": [
        {
          "name": "tanstack-form",
          "type": "registry:ui",
          "title": "TanStack Form",
          "path": "src/registry/new-york/tanstack-form/tanstack-form.tsx",
          "description": "A form component built with TanStack Form.",
          "dependencies": [
            "@tanstack/react-form"
          ],
          "registryDependencies": [
            "label"
          ]
        }
      ]
    },
    {
      "name": "basic-info",
      "type": "registry:block",
      "title": "Basic Info",
      "description": "A basic info form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/registry/new-york/blocks/basic-info.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useCallback } from \"react\";\nimport { z } from \"zod\";\n\nconst FormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n  email: z.string().email({\n    message: \"Please enter a valid email address.\",\n  }),\n  age: z.number().min(8, {\n    message: \"Age must be at least 18 years.\",\n  }),\n  bio: z.string().max(160, {\n    message: \"Bio must not exceed 160 characters, ss again.\",\n  }),\n});\n\nfunction BasicInfoForm({\n  onSubmit,\n}: { onSubmit: (data: z.infer<typeof FormSchema>) => void }) {\n  const form = useAppForm({\n    validators: { onBlur: FormSchema },\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      age: 0,\n      bio: \"\",\n    },\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        className=\"@container mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\"\n        onSubmit={handleSubmit}\n        noValidate\n      >\n        <div className=\"grid @md:grid-cols-2 grid-cols-1 items-start gap-4\">\n          <form.AppField\n            name=\"username\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Username</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"FatahChan\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  This is your public display name.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"email\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Email</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  Enter your email address for account verification.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"age\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Age</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"number\"\n                    inputMode=\"numeric\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(Number(e.target.value))}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  Must be at least 18 years old.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"bio\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Bio</field.FormLabel>\n                <field.FormControl>\n                  <Textarea\n                    placeholder=\"Tell us about yourself\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  A brief description about yourself (optional).\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n        </div>\n        <Button type=\"submit\" className=\"w-full\">\n          Create Account\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nBasicInfoForm.displayName = \"BasicInfoForm\";\n\nexport default BasicInfoForm;\n"
        }
      ],
      "categories": [
        "forms",
        "user"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input",
        "textarea"
      ]
    },
    {
      "name": "login",
      "type": "registry:block",
      "title": "Login",
      "description": "A login form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/registry/new-york/blocks/login.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { cn } from \"@/lib/utils\";\nimport { type FormHTMLAttributes, useCallback } from \"react\";\nimport * as z from \"zod\";\n\nconst loginFormSchema = z.object({\n  email: z.string(),\n  password: z.string().min(1),\n});\n\ninterface LoginFormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {\n  onSubmit: (data: z.infer<typeof loginFormSchema>) => void;\n  defaultValues?: z.infer<typeof loginFormSchema>;\n}\n\nfunction LoginForm({\n  onSubmit,\n\n  defaultValues,\n  className,\n  ...props\n}: LoginFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n    },\n    validators: { onBlur: loginFormSchema },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        onSubmit={handleSubmit}\n        className={cn(\n          \"mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\",\n          className,\n        )}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Email</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"example@example.com\"\n                  type=\"email\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormDescription>This is your email</field.FormDescription>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Password</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"password\"\n                  type=\"text\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormDescription>\n                This is your password\n              </field.FormDescription>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\">\n          Submit\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nLoginForm.displayName = \"LoginForm\";\n\nexport default LoginForm;\n"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input"
      ]
    },
    {
      "name": "shipping-info",
      "type": "registry:block",
      "title": "Shipping Info",
      "description": "A shipping information form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/registry/new-york/blocks/shipping-info.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { useCallback } from \"react\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { z } from \"zod\";\n\nconst shippingSchema = z.object({\n  fullName: z.string().min(2, {\n    message: \"Full name must be at least 2 characters long.\",\n  }),\n  addressLine1: z.string().min(5, {\n    message: \"Address must be at least 5 characters long.\",\n  }),\n  addressLine2: z.string(),\n  city: z.string().min(2, {\n    message: \"City must be at least 2 characters long.\",\n  }),\n  state: z.string().min(2, {\n    message: \"State must be at least 2 characters long.\",\n  }),\n  postalCode: z.string().min(4, {\n    message: \"Please enter a valid postal code.\",\n  }),\n  phone: z.string().min(8, {\n    message: \"Please enter a valid phone number.\",\n  }),\n});\n\ninterface ShippingFormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {\n  onSubmit: (data: z.infer<typeof shippingSchema>) => void;\n  defaultValues?: z.infer<typeof shippingSchema>;\n}\n\nfunction ShippingForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: ShippingFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      fullName: defaultValues?.fullName ?? \"\",\n      addressLine1: defaultValues?.addressLine1 ?? \"\",\n      addressLine2: defaultValues?.addressLine2 ?? \"\",\n      city: defaultValues?.city ?? \"\",\n      state: defaultValues?.state ?? \"\",\n      postalCode: defaultValues?.postalCode ?? \"\",\n      phone: defaultValues?.phone ?? \"\",\n    },\n    validators: { onBlur: shippingSchema },\n    onSubmit: ({ value }) => {\n      onSubmit(value);\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Full Name</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"addressLine1\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Address Line 1</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"123 Main St\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"addressLine2\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Address Line 2 (Optional)</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"Apt 4B\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <form.AppField\n            name=\"city\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>City</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"New York\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n\n          <form.AppField\n            name=\"state\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>State</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"NY\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <form.AppField\n            name=\"postalCode\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>Postal Code</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"10001\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n\n          <form.AppField\n            name=\"phone\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>Phone Number</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"tel\"\n                    placeholder=\"+1 (555) 000-0000\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\">\n          Save Shipping Information\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nShippingForm.displayName = \"ShippingForm\";\nShippingForm.__CATEGORIES = [\"forms\", \"checkout\"];\nShippingForm.__TITLE = \"Shipping Info\";\nShippingForm.__DESCRIPTION =\n  \"A shipping information form component built with TanStack Form.\";\nShippingForm.__DEPENDENCIES = [\"zod\"];\nShippingForm.__REGISTRY_DEPENDENCIES = [\n  \"https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json\",\n  \"button\",\n  \"input\",\n];\n\nexport default ShippingForm;\n"
        }
      ],
      "categories": [
        "forms",
        "checkout"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input"
      ]
    },
    {
      "name": "sign-up",
      "type": "registry:block",
      "title": "Sign Up",
      "description": "A sign up form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/registry/new-york/blocks/sign-up.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { useCallback } from \"react\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { z } from \"zod\";\n\nconst signUpSchema = z\n  .object({\n    email: z.string().email({\n      message: \"Please enter a valid email address.\",\n    }),\n    password: z.string().min(8, {\n      message: \"Password must be at least 8 characters long.\",\n    }),\n    confirmPassword: z.string(),\n    fullName: z.string().min(2, {\n      message: \"Full name must be at least 2 characters long.\",\n    }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\ninterface SignUpFormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {\n  onSubmit: (data: z.infer<typeof signUpSchema>) => void;\n  defaultValues?: z.infer<typeof signUpSchema>;\n}\n\nfunction SignUpForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: SignUpFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n      confirmPassword: defaultValues?.confirmPassword ?? \"\",\n      fullName: defaultValues?.fullName ?? \"\",\n    },\n    validators: { onBlur: signUpSchema },\n    onSubmit: ({ value }) => {\n      onSubmit(value);\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Full Name</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Email</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  type=\"email\"\n                  placeholder=\"john.doe@example.com\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Password</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"confirmPassword\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Confirm Password</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <Button type=\"submit\" className=\"w-full\">\n          Sign Up\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nSignUpForm.displayName = \"SignUpForm\";\n\nexport default SignUpForm;\n"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input"
      ]
    }
  ]
}