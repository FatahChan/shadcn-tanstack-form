{
  "name": "shadcn-tanstack-form",
  "homepage": "https://fatahchan.github.io/shadcn-tanstack-form/",
  "items": [
    {
      "name": "tanstack-form",
      "type": "registry:ui",
      "title": "TanStack Form",
      "description": "A form component built with TanStack Form.",
      "files": [
        {
          "name": "tanstack-form",
          "type": "registry:ui",
          "title": "TanStack Form",
          "path": "src/components/ui/tanstack-form.tsx",
          "description": "A form component built with TanStack Form.",
          "dependencies": [
            "@tanstack/react-form"
          ],
          "registryDependencies": [
            "label"
          ]
        }
      ]
    },
    {
      "name": "basic-info",
      "type": "registry:block",
      "title": "Basic Info",
      "description": "A basic info form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/components/blocks/basic-info.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { type FormHTMLAttributes, useCallback } from \"react\";\nimport { z } from \"zod\";\n\nconst FormSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\",\n  }),\n  email: z.string().email({\n    message: \"Please enter a valid email address.\",\n  }),\n  age: z.number().min(8, {\n    message: \"Age must be at least 18 years.\",\n  }),\n  bio: z.string().max(160, {\n    message: \"Bio must not exceed 160 characters, ss again.\",\n  }),\n});\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface BasicInfoFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof FormSchema>) => void;\n  defaultValues?: z.infer<typeof FormSchema>;\n}\n\nfunction BasicInfoForm({\n  onSubmit,\n  defaultValues,\n  ...props\n}: BasicInfoFormProps) {\n  const form = useAppForm({\n    validators: { onBlur: FormSchema },\n    defaultValues: defaultValues ?? {\n      username: \"\",\n      email: \"\",\n      age: 0,\n      bio: \"\",\n    },\n    onSubmit: ({ formApi, value }) => {\n      onSubmit(value);\n      formApi.reset();\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        className=\"@container mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <div className=\"grid @md:grid-cols-2 grid-cols-1 items-start gap-4\">\n          <form.AppField\n            name=\"username\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Username</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"FatahChan\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  This is your public display name.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"email\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Email</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"email\"\n                    placeholder=\"example@email.com\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  Enter your email address for account verification.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"age\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Age</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    type=\"number\"\n                    inputMode=\"numeric\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(Number(e.target.value))}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  Must be at least 18 years old.\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n          <form.AppField\n            name=\"bio\"\n            children={(field) => (\n              <field.FormItem className=\"space-y-1.5\">\n                <field.FormLabel>Bio</field.FormLabel>\n                <field.FormControl>\n                  <Textarea\n                    placeholder=\"Tell us about yourself\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormDescription className=\"text-xs\">\n                  A brief description about yourself (optional).\n                </field.FormDescription>\n                <field.FormMessage className=\"text-xs\" />\n              </field.FormItem>\n            )}\n          />\n        </div>\n        <Button type=\"submit\" className=\"w-full\">\n          Create Account\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nBasicInfoForm.displayName = \"BasicInfoForm\";\n\nexport default BasicInfoForm;\n"
        }
      ],
      "categories": [
        "forms",
        "user"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input",
        "textarea"
      ]
    },
    {
      "name": "login",
      "type": "registry:block",
      "title": "Login",
      "description": "A login form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/components/blocks/login.tsx",
          "content": "\"use client\";\nimport PasswordInput from \"@/components/form-fields/password-input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { cn } from \"@/lib/utils\";\nimport { type FormHTMLAttributes, useCallback } from \"react\";\nimport * as z from \"zod\";\n\nconst loginFormSchema = z.object({\n  email: z.string(),\n  password: z.string().min(1),\n});\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface LoginFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof loginFormSchema>) => void;\n  defaultValues?: z.infer<typeof loginFormSchema>;\n}\n\nfunction LoginForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: LoginFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n    },\n    validators: { onBlur: loginFormSchema },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n  return (\n    <form.AppForm>\n      <form\n        onSubmit={handleSubmit}\n        className={cn(\n          \"mx-auto w-full max-w-lg space-y-8 rounded-md border p-4 py-10\",\n          className,\n        )}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Email</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"example@example.com\"\n                  type=\"email\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormDescription>This is your email</field.FormDescription>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Password</field.FormLabel>\n              <field.FormControl>\n                <PasswordInput\n                  placeholder=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormDescription>\n                This is your password\n              </field.FormDescription>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n        <Button type=\"submit\" className=\"w-full\">\n          Submit\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nLoginForm.displayName = \"LoginForm\";\n\nexport default LoginForm;\n"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input"
      ]
    },
    {
      "name": "shipping-info",
      "type": "registry:block",
      "title": "Shipping Info",
      "description": "A shipping information form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/components/blocks/shipping-info.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\nimport { useCallback } from \"react\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { z } from \"zod\";\nimport PhoneInputField from \"../form-fields/phone-input\";\nconst shippingSchema = z.object({\n  fullName: z.string().min(2, {\n    message: \"Full name must be at least 2 characters long.\",\n  }),\n  addressLine1: z.string().min(5, {\n    message: \"Address must be at least 5 characters long.\",\n  }),\n  addressLine2: z.string(),\n  city: z.string().min(2, {\n    message: \"City must be at least 2 characters long.\",\n  }),\n  state: z.string().min(2, {\n    message: \"State must be at least 2 characters long.\",\n  }),\n  postalCode: z.string().min(4, {\n    message: \"Please enter a valid postal code.\",\n  }),\n  phone: z.string().refine((value) => isValidPhoneNumber(value, \"US\"), {\n    message: \"Please enter a valid phone number.\",\n  }),\n});\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface ShippingFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof shippingSchema>) => void;\n  defaultValues?: z.infer<typeof shippingSchema>;\n}\n\nfunction ShippingForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: ShippingFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      fullName: defaultValues?.fullName ?? \"\",\n      addressLine1: defaultValues?.addressLine1 ?? \"\",\n      addressLine2: defaultValues?.addressLine2 ?? \"\",\n      city: defaultValues?.city ?? \"\",\n      state: defaultValues?.state ?? \"\",\n      postalCode: defaultValues?.postalCode ?? \"\",\n      phone: defaultValues?.phone ?? \"\",\n    },\n    validators: { onBlur: shippingSchema },\n    onSubmit: ({ value }) => {\n      onSubmit(value);\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Full Name</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"addressLine1\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Address Line 1</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"123 Main St\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"addressLine2\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Address Line 2 (Optional)</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"Apt 4B\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <form.AppField\n            name=\"city\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>City</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"New York\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n\n          <form.AppField\n            name=\"state\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>State</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"NY\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <form.AppField\n            name=\"postalCode\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>Postal Code</field.FormLabel>\n                <field.FormControl>\n                  <Input\n                    placeholder=\"10001\"\n                    value={field.state.value}\n                    onChange={(e) => field.handleChange(e.target.value)}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n\n          <form.AppField\n            name=\"phone\"\n            children={(field) => (\n              <field.FormItem>\n                <field.FormLabel>Phone Number</field.FormLabel>\n                <field.FormControl>\n                  <PhoneInputField\n                    value={field.state.value}\n                    onChange={field.handleChange}\n                    onBlur={field.handleBlur}\n                  />\n                </field.FormControl>\n                <field.FormMessage />\n              </field.FormItem>\n            )}\n          />\n        </div>\n\n        <Button type=\"submit\" className=\"w-full\">\n          Save Shipping Information\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nShippingForm.displayName = \"ShippingForm\";\nShippingForm.__CATEGORIES = [\"forms\", \"checkout\"];\nShippingForm.__TITLE = \"Shipping Info\";\nShippingForm.__DESCRIPTION =\n  \"A shipping information form component built with TanStack Form.\";\nShippingForm.__DEPENDENCIES = [\"zod\"];\nShippingForm.__REGISTRY_DEPENDENCIES = [\n  \"https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json\",\n  \"button\",\n  \"input\",\n];\n\nexport default ShippingForm;\n"
        }
      ],
      "categories": [
        "forms",
        "checkout"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "https://shadcn-tanstack-form.netlify.app/r/phone-input.json",
        "button",
        "input"
      ]
    },
    {
      "name": "sign-up",
      "type": "registry:block",
      "title": "Sign Up",
      "description": "A sign up form component built with TanStack Form.",
      "files": [
        {
          "type": "registry:block",
          "path": "src/components/blocks/sign-up.tsx",
          "content": "\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAppForm } from \"@/components/ui/tanstack-form\";\nimport { useCallback } from \"react\";\nimport type { FormHTMLAttributes } from \"react\";\nimport { z } from \"zod\";\n\nconst signUpSchema = z\n  .object({\n    email: z.string().email({\n      message: \"Please enter a valid email address.\",\n    }),\n    password: z.string().min(8, {\n      message: \"Password must be at least 8 characters long.\",\n    }),\n    confirmPassword: z.string(),\n    fullName: z.string().min(2, {\n      message: \"Full name must be at least 2 characters long.\",\n    }),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords do not match\",\n    path: [\"confirmPassword\"],\n  });\n\ninterface FormProps\n  extends Omit<FormHTMLAttributes<HTMLFormElement>, \"onSubmit\"> {}\n\ninterface SignUpFormProps extends FormProps {\n  onSubmit: (data: z.infer<typeof signUpSchema>) => void;\n  defaultValues?: z.infer<typeof signUpSchema>;\n}\nfunction SignUpForm({\n  onSubmit,\n  defaultValues,\n  className,\n  ...props\n}: SignUpFormProps) {\n  const form = useAppForm({\n    defaultValues: {\n      email: defaultValues?.email ?? \"\",\n      password: defaultValues?.password ?? \"\",\n      confirmPassword: defaultValues?.confirmPassword ?? \"\",\n      fullName: defaultValues?.fullName ?? \"\",\n    },\n    validators: { onBlur: signUpSchema },\n    onSubmit: ({ value }) => {\n      onSubmit(value);\n    },\n  });\n\n  const handleSubmit = useCallback(\n    (e: React.FormEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      form.handleSubmit();\n    },\n    [form],\n  );\n\n  return (\n    <form.AppForm>\n      <form\n        className=\"mx-auto w-full max-w-lg space-y-6 rounded-lg border p-6\"\n        onSubmit={handleSubmit}\n        noValidate\n        {...props}\n      >\n        <form.AppField\n          name=\"fullName\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Full Name</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  placeholder=\"John Doe\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"email\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Email</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  type=\"email\"\n                  placeholder=\"john.doe@example.com\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"password\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Password</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <form.AppField\n          name=\"confirmPassword\"\n          children={(field) => (\n            <field.FormItem>\n              <field.FormLabel>Confirm Password</field.FormLabel>\n              <field.FormControl>\n                <Input\n                  type=\"password\"\n                  value={field.state.value}\n                  onChange={(e) => field.handleChange(e.target.value)}\n                  onBlur={field.handleBlur}\n                />\n              </field.FormControl>\n              <field.FormMessage />\n            </field.FormItem>\n          )}\n        />\n\n        <Button type=\"submit\" className=\"w-full\">\n          Sign Up\n        </Button>\n      </form>\n    </form.AppForm>\n  );\n}\n\nSignUpForm.displayName = \"SignUpForm\";\n\nexport default SignUpForm;\n"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ],
      "dependencies": [
        "zod"
      ],
      "registryDependencies": [
        "https://shadcn-tanstack-form.netlify.app/r/tanstack-form.json",
        "button",
        "input"
      ]
    },
    {
      "name": "password-input",
      "type": "registry:component",
      "title": "Password Input",
      "description": "A password input component",
      "files": [
        {
          "type": "registry:component",
          "path": "src/components/form-fields/password-input.tsx",
          "content": "\"use client\";\n\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\n\nimport { Eye, EyeOff } from \"lucide-react\";\nimport type { ComponentProps, HTMLAttributes } from \"react\";\nimport { useState } from \"react\";\n\nexport default function PasswordInput({\n  className,\n  containerProps,\n  ...props\n}: ComponentProps<typeof Input> & {\n  containerProps?: HTMLAttributes<HTMLDivElement>;\n}) {\n  const [isVisible, setIsVisible] = useState<boolean>(false);\n\n  const toggleVisibility = () => setIsVisible((prevState) => !prevState);\n\n  return (\n    <div\n      {...containerProps}\n      className={cn(\"relative\", containerProps?.className)}\n    >\n      <Input\n        className={cn(\"pe-9\", className)}\n        placeholder=\"Password\"\n        type={isVisible ? \"text\" : \"password\"}\n        {...props}\n      />\n      <button\n        type=\"button\"\n        className=\"absolute inset-y-0 end-0 flex h-full w-9 items-center justify-center rounded-e-lg text-muted-foreground/80 outline-offset-2 transition-colors hover:text-foreground focus:z-10 focus-visible:outline-2 focus-visible:outline-ring/70 disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\"\n        onClick={toggleVisibility}\n        aria-label={isVisible ? \"Hide password\" : \"Show password\"}\n        aria-pressed={isVisible}\n        aria-controls=\"password\"\n      >\n        {isVisible ? (\n          <EyeOff size={16} strokeWidth={2} aria-hidden=\"true\" />\n        ) : (\n          <Eye size={16} strokeWidth={2} aria-hidden=\"true\" />\n        )}\n      </button>\n    </div>\n  );\n}\n"
        }
      ],
      "categories": [
        "forms",
        "auth"
      ],
      "registryDependencies": [
        "input"
      ]
    },
    {
      "name": "phone-input",
      "type": "registry:component",
      "title": "Phone Input",
      "description": "A phone input component",
      "files": [
        {
          "type": "registry:component",
          "path": "src/components/form-fields/phone-input.tsx",
          "content": "import { Input } from \"@/components/ui/input\";\nimport { AsYouType, type CountryCode } from \"libphonenumber-js\";\nimport type { ComponentProps } from \"react\";\nimport { NumberFormatBase } from \"react-number-format\";\n\ninterface PhoneInputFieldProps\n  extends Omit<\n    ComponentProps<typeof Input>,\n    \"type\" | \"defaultValue\" | \"onChange\"\n  > {\n  value?: string;\n  defaultValue?: string | number | null | undefined;\n  onChange?: (value: string) => void;\n}\n\nfunction phoneFormatter(countryCode: CountryCode, value: string) {\n  const asYouType = new AsYouType(countryCode);\n  return asYouType.input(value);\n}\n\nexport default function PhoneInputField({\n  value,\n  onChange,\n  defaultValue,\n  ...props\n}: PhoneInputFieldProps) {\n  return (\n    <NumberFormatBase\n      type=\"tel\"\n      value={value}\n      customInput={Input}\n      placeholder=\"Phone number\"\n      getInputRef={props.ref}\n      className={props.className}\n      defaultValue={defaultValue}\n      format={(value) => phoneFormatter(\"US\", value.slice(0, 15))}\n      onValueChange={(e) => {\n        onChange?.(e.value);\n      }}\n      {...props}\n    />\n  );\n}\n"
        }
      ],
      "categories": [
        "forms",
        "user"
      ],
      "dependencies": [
        "react-number-format",
        "libphonenumber-js"
      ],
      "registryDependencies": [
        "input"
      ]
    },
    {
      "name": "rich-text-editor",
      "type": "registry:component",
      "title": "Rich Text Editor",
      "description": "A Rich Text Editor component",
      "files": [
        {
          "type": "registry:component",
          "path": "src/components/form-fields/rich-text-editor.tsx",
          "content": "import { cn } from \"@/lib/utils\";\nimport {\n  BoldIcon,\n  ItalicIcon,\n  ListIcon,\n  ListOrderedIcon,\n  StrikethroughIcon,\n  UnderlineIcon,\n} from \"lucide-react\";\nimport Quill, { type QuillOptions } from \"quill/core\";\nimport \"quill/dist/quill.snow.css\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ToggleGroup, ToggleGroupItem } from \"@/components/ui/toggle-group\";\nimport {\n  type HtmlHTMLAttributes,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\n\ninterface RichTextEditorProps\n  extends Omit<HtmlHTMLAttributes<HTMLDivElement>, \"value\" | \"onChange\"> {\n  quillOptions?: QuillOptions;\n  value?: string;\n  onChange?: (value: string) => void;\n}\n\nconst EditorContext = createContext<{\n  editorContainerRef: React.RefObject<HTMLDivElement | null>;\n  quill: Quill | null;\n  formats: { [key: string]: unknown };\n} | null>(null);\n\nconst RichTextEditorRoot = ({\n  children,\n  quillOptions,\n  value,\n  onChange,\n  ...props\n}: RichTextEditorProps) => {\n  const editorContainerRef = useRef<HTMLDivElement>(null);\n  const [quill, setQuill] = useState<Quill | null>(null);\n  useEffect(() => {\n    const editorContainer = editorContainerRef.current;\n    if (!editorContainer) {\n      throw new Error(\"editorContainer or toolbarContainer is not found\");\n    }\n    const quill = new Quill(editorContainer, {\n      ...quillOptions,\n      modules: {\n        ...quillOptions?.modules,\n      },\n    });\n\n    setQuill(quill);\n    return () => {\n      setQuill(null);\n      editorContainer.innerHTML = \"\";\n    };\n  }, [quillOptions]);\n\n  const [formats, setFormats] = useState<{ [key: string]: unknown }>({});\n  useEffect(() => {\n    if (!quill) return;\n    const updateFormats = () => {\n      const formats = quill.getFormat();\n      console.log(formats);\n      setFormats((prev) => {\n        if (JSON.stringify(prev) === JSON.stringify(formats)) return prev;\n        return formats;\n      });\n    };\n    for (const event of Object.values(Quill.events)) {\n      quill.on(event, updateFormats);\n    }\n    return () => {\n      for (const event of Object.values(Quill.events)) {\n        quill.off(event, updateFormats);\n      }\n    };\n  }, [quill]);\n\n  return (\n    <EditorContext.Provider\n      value={{\n        editorContainerRef,\n        quill,\n        formats,\n      }}\n    >\n      <div\n        className=\"prose grid min-w-3xl items-center justify-items-start gap-4\"\n        {...props}\n      >\n        {children}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\nconst HeaderSelect = () => {\n  const { quill, formats } = useEditorContext();\n\n  return (\n    <Select\n      defaultValue=\"0\"\n      value={formats.header?.toString() || \"0\"}\n      onValueChange={(value) => quill?.format(\"header\", Number(value))}\n    >\n      <SelectTrigger className=\"min-w-32\">\n        <SelectValue placeholder=\"Select a header\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectItem value=\"1\">H1</SelectItem>\n        <SelectItem value=\"2\">H2</SelectItem>\n        <SelectItem value=\"3\">H3</SelectItem>\n        <SelectItem value=\"4\">H4</SelectItem>\n        <SelectItem value=\"0\">Normal</SelectItem>\n      </SelectContent>\n    </Select>\n  );\n};\n\nconst FormatToggle = () => {\n  const { quill, formats } = useEditorContext();\n\n  const selectedFormats = useMemo(() => {\n    return Object.keys(formats)\n      .filter((key) => [\"bold\", \"italic\", \"underline\", \"strike\"].includes(key))\n      .sort() as string[];\n  }, [formats]);\n\n  const handleFormatChange = useCallback(\n    (format: string) => {\n      if (!quill) return;\n      const formats = quill.getFormat();\n      console.log(formats);\n      if (formats[format] === true) {\n        quill.format(format, false);\n        return;\n      }\n      quill.format(format, true);\n    },\n    [quill],\n  );\n\n  return (\n    <ToggleGroup type=\"multiple\" value={selectedFormats} variant=\"outline\">\n      <ToggleGroupItem\n        value=\"bold\"\n        aria-label=\"bold\"\n        onClick={() => handleFormatChange(\"bold\")}\n      >\n        <BoldIcon />\n      </ToggleGroupItem>\n      <ToggleGroupItem\n        value=\"italic\"\n        aria-label=\"italic\"\n        onClick={() => handleFormatChange(\"italic\")}\n      >\n        <ItalicIcon />\n      </ToggleGroupItem>\n      <ToggleGroupItem\n        value=\"underline\"\n        aria-label=\"underline\"\n        onClick={() => handleFormatChange(\"underline\")}\n      >\n        <UnderlineIcon />\n      </ToggleGroupItem>\n      <ToggleGroupItem\n        value=\"strike\"\n        aria-label=\"strikethrough\"\n        onClick={() => handleFormatChange(\"strike\")}\n      >\n        <StrikethroughIcon />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  );\n};\n\nconst ListToggle = () => {\n  const { quill, formats } = useEditorContext();\n\n  const handleFormatChange = useCallback(\n    (format: string, value: \"ordered\" | \"bullet\") => {\n      if (!quill) return;\n      const formats = quill.getFormat();\n      if (formats.list === value) {\n        quill.format(format, false);\n        return;\n      }\n      quill.format(format, value);\n    },\n    [quill],\n  );\n\n  return (\n    <ToggleGroup\n      type=\"single\"\n      value={(formats.list as \"bullet\" | \"ordered\" | undefined) ?? \"\"}\n      variant=\"outline\"\n    >\n      <ToggleGroupItem\n        value=\"bullet\"\n        aria-label=\"bullet-list\"\n        onClick={() => handleFormatChange(\"list\", \"bullet\")}\n      >\n        <ListIcon />\n      </ToggleGroupItem>\n      <ToggleGroupItem\n        value=\"ordered\"\n        aria-label=\"ordered-list\"\n        onClick={() => handleFormatChange(\"list\", \"ordered\")}\n      >\n        <ListOrderedIcon />\n      </ToggleGroupItem>\n    </ToggleGroup>\n  );\n};\n\nconst useEditorContext = () => {\n  const context = useContext(EditorContext);\n  if (!context) {\n    throw new Error(\"useEditorContext must be used within an EditorProvider\");\n  }\n  return context;\n};\n\nconst Editor = ({\n  className,\n  ...props\n}: HtmlHTMLAttributes<HTMLDivElement>) => {\n  const { editorContainerRef } = useEditorContext();\n  return (\n    <div\n      ref={editorContainerRef}\n      className={cn(\n        \"min-h-16 w-full rounded-md border border-input bg-transparent text-base shadow-xs outline-none transition-[color,box-shadow] placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 md:text-sm dark:bg-input/30 dark:aria-invalid:ring-destructive/40\",\n        className,\n      )}\n      {...props}\n    />\n  );\n};\n\nfunction RichTextEditor() {\n  const [value, setValue] = useState<string>(\"\");\n  useEffect(() => {\n    console.log(value);\n  }, [value]);\n  return (\n    <RichTextEditorRoot value={value} onChange={setValue}>\n      <div className=\"flex w-full gap-2\">\n        <HeaderSelect />\n        <FormatToggle />\n        <ListToggle />\n      </div>\n      <Editor />\n    </RichTextEditorRoot>\n  );\n}\n\nexport default RichTextEditor;\n"
        }
      ],
      "categories": [
        "forms",
        "editor"
      ],
      "registryDependencies": [
        "textarea"
      ]
    }
  ]
}